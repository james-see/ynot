name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller yt-dlp
      
      - name: Build Linux executable
        run: |
          pyinstaller --onefile --windowed --name ynot --icon ynot.png main.py
      
      - name: Install FUSE and download AppImage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
      
      - name: Create AppImage structure
        run: |
          mkdir -p ynot.AppDir/usr/bin
          mkdir -p ynot.AppDir/usr/share/applications
          mkdir -p ynot.AppDir/usr/share/icons/hicolor/512x512/apps
          cp dist/ynot ynot.AppDir/usr/bin/
          cp ynot.png ynot.AppDir/usr/share/icons/hicolor/512x512/apps/ynot.png
          cp ynot.png ynot.AppDir/ynot.png
          
          cat > ynot.AppDir/ynot.desktop << EOF
          [Desktop Entry]
          Name=YNOT
          Exec=ynot
          Icon=ynot
          Type=Application
          Categories=Utility;
          EOF
          
          cat > ynot.AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/ynot" "$@"
          EOF
          
          chmod +x ynot.AppDir/AppRun
      
      - name: Build AppImage
        run: |
          ARCH=x86_64 ./appimagetool ynot.AppDir ynot-x86_64.AppImage
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            ynot-x86_64.AppImage
            dist/ynot

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller yt-dlp
      
      - name: Build macOS app
        run: |
          pyinstaller --onefile --windowed --name ynot --icon icon.icns main.py
      
      - name: Create DMG
        run: |
          mkdir -p dist/dmg
          cp -r dist/ynot.app dist/dmg/
          hdiutil create -volname "YNOT" -srcfolder dist/dmg -ov -format UDZO dist/ynot-macos.dmg
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/ynot-macos.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller yt-dlp
      
      - name: Build Windows executable
        run: |
          pyinstaller --onefile --windowed --name ynot --icon ynot.png main.py
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/ynot.exe

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-build/ynot-x86_64.AppImage
            macos-build/ynot-macos.dmg
            windows-build/ynot.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
